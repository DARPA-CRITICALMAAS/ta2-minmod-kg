version: 1

services:
  - name: validators.filename
    classpath: minmodkg.validators.FilenameValidatorService
    args:
      pattern: ^[a-zA-Z0-9_\-,.]+$
  - name: kgrel.data.entities
    classpath: minmodkg.etl.kgrel_entity.KGRelEntityETLService
    args:
      parallel: true
  - name: kgrel.data.mineral_site
    classpath: minmodkg.etl.mineral_site.MineralSiteETLService
    args:
      parallel: true
  - name: kg.data.same_as
    classpath: minmodkg.etl.same_as.SameAsService
    args:
      parallel: true
  - name: copy
    classpath: statickg.services.copy.CopyService
  - name: version
    classpath: statickg.services.version.VersionService
  - name: kg.loader.fuseki
    classpath: minmodkg.etl.fuseki.FusekiLoaderService
    args:
      capture_output: false
      dbdir: "::DB_DIR::kg"
      find_by_id: docker ps --format '{{{{index (split .Ports "-") 0}}}}' --filter name={ID}
      start_service: >-
        docker run --name {ID}
        -d -p 127.0.0.1:{PORT}:3030
        -v {DB_DIR}:/home/criticalmaas/databases
        -v ::DATA_DIR::{}:/data
        --network=minmod
        --network-alias=kg
        minmod-fuseki fuseki/fuseki-server --config=fuseki/config.ttl
      stop_service: docker stop {ID} && docker rm {ID}
      load_cmd: >-
        docker run --rm --name {ID}
        -v {DB_DIR}:/home/criticalmaas/databases
        -v ::DATA_DIR::{}:/data
        -w /data
        minmod-fuseki mytdbloader --loc /home/criticalmaas/databases /data/{INPUT_FILE_LST}
  - name: kg.loader.blazegraph
    classpath: minmodkg.etl.blazegraph.BlazeGraphLoaderService
    args:
      capture_output: false
      dbdir: "::DB_DIR::kg"
      find_by_id: docker ps --format '{{{{index (split .Ports "-") 0}}}}' --filter name={ID}
      start_service: >-
        docker run --name {ID}
        -d -p 127.0.0.1:{PORT}:9999
        -v {DB_DIR}:/home/criticalmaas/database
        -v ::DATA_DIR::{}:/data
        --network=minmod
        --network-alias=kg
        minmod-blazegraph
      stop_service: docker stop {ID} && docker rm {ID}
      load_cmd: >-
        docker run --rm --name {ID}
        -v {DB_DIR}:/home/criticalmaas/database
        -v ::DATA_DIR::{}:/data
        minmod-blazegraph python3 /home/criticalmaas/data_loader.py /data/{INPUT_FILE_LST}
  - name: kg.loader.virtuoso
    classpath: minmodkg.etl.virtuoso.VirtuosoLoaderService
    args:
      capture_output: false
      dbdir: "::DB_DIR::kg"
      find_by_id: docker ps --format '{{{{index (split .Ports "-") 0}}}}' --filter name={ID}
      start_service: >-
        docker run --name {ID}
        -d -p 127.0.0.1:{PORT}:8890
        -v {DB_DIR}:/database
        -v ::DATA_DIR::{}:/criticalmaas/kgdata
        --network=minmod
        --network-alias=kg
        minmod-virtuoso
      stop_service: docker stop {ID} && docker rm {ID}
      load_cmd: docker exec {ID} python3 /criticalmaas/build/data_loader.py /criticalmaas/kgdata/{INPUT_FILE_LST}
  - name: kg.loader.postgres
    classpath: minmodkg.etl.postgres.PostgresLoaderService
    args:
      capture_output: false
      dbdir: "::DB_DIR::kgrel"
      find_by_id: docker ps --format '{{{{index (split .Ports "-") 0}}}}' --filter name={ID}
      start_service: >-
        docker run --name {ID}
        -d -p 127.0.0.1:{PORT}:5432
        -v {DB_DIR}:/database
        --shm-size=1G
        --network=minmod
        --network-alias=kg-postgres
        minmod-postgres
      stop_service: docker stop {ID} && docker rm {ID}
      load_cmd: "" # postgres does not need to load data
pipeline:
  - service: validators.filename
    args:
      input:
        - ::REPO::data/entities/*.csv
        - ::REPO::data/mineral-sites/*/*/*.json
        - ::REPO::data/same-as/umn/*.csv
        - ::REPO::data/mappable-criteria/sri/*.json
        - ::REPO::data/curated-mineral-sites/*/*/*.json
  - service: kgrel.data.entities
    args:
      input: ::REPO::data/entities
      output: ::DATA_DIR::entities
  - service: kg.data.same_as
    args:
      input: ::REPO::data/same-as/umn/*.csv
      curated_input: ::REPO::data/curated-same-as/*/*.json
      mineral_site_dir: ::REPO::data/mineral-sites
      output:
        base: ::DATA_DIR::same-as/
        format: "{fileparent}_{filestem}.json"
  - service: kgrel.data.mineral_site
    args:
      mineral_site_dir: ::REPO::data/mineral-sites
      entity_dir: ::DATA_DIR::entities
      same_as_group: ::DATA_DIR::same-as/final/groups.json
      output: ::DATA_DIR::mineral-sites
  - service: copy
    args:
      input: ::CFG_DIR::schema/ontology.ttl
      output: "::DATA_DIR::"
  - service: version
    args:
      entity: https://minmod.isi.edu/resource/kg
      entity_type: https://minmod.isi.edu/ontology/KnowledgeGraph
      output: ::DATA_DIR::version.ttl
  - service: kg.loader.postgres
    args:
      input:
        - ::DATA_DIR::mineral-sites/kgrel/*.json*
        - ::DATA_DIR::entities/*.json*
      deploy: { port: 5432 }
  - service: kg.loader.fuseki
    # service: kg.loader.blazegraph
    # - service: kg.loader.virtuoso
    args:
      input:
        - ::DATA_DIR::ontology.ttl
        - ::DATA_DIR::entities/*.ttl
        - ::DATA_DIR::mineral-sites/kg/*/*.ttl
        - ::DATA_DIR::same-as/final/*.ttl
      replaceable_input: ::DATA_DIR::version.ttl
      deploy: { port: 3030 }
